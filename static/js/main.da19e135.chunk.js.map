{"version":3,"sources":["components/Scores/Scores.tsx","components/SideBar/SideBar.tsx","components/Tile/Tile.tsx","components/TilesWrapper/TilesWrapper.tsx","components/Wrapper/Wrapper.tsx","data/tiles.ts","App.tsx","index.tsx"],"names":["Scores","props","id","className","score","topScore","hasWon","hasLost","SideBar","Tile","src","alt","onClick","clickTile","draggable","TilesWrapper","children","Wrapper","tiles","App","state","shuffleTiles","clicked","newState","setState","includes","push","length","render","map","tile","key","tilesArray","i","j","Math","floor","random","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.da19e135.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Scores.css\";\r\n\r\ninterface IProps {\r\n\r\n    score: number;\r\n    topScore: number;\r\n    hasWon: boolean;\r\n    hasLost: boolean;\r\n}\r\n\r\nexport function Scores(props: IProps): JSX.Element {\r\n\r\n    return (\r\n\r\n        <div id=\"scoresWrapper\">\r\n            <div className=\"scoreBox\">\r\n                <span className=\"scoreLabel\">Score</span>\r\n                <span className=\"score\">{props.score}</span>\r\n            </div>\r\n            <div className=\"scoreBox\">\r\n                <span className=\"scoreLabel\">Top Score</span>\r\n                <span className=\"score\">{props.topScore}</span>\r\n            </div>\r\n            {props.hasWon && <div className=\"resultWin\">You Won!</div>}\r\n            {props.hasLost && <div className=\"resultLoss\">You Lost</div>}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nimport { Scores } from \"../Scores/Scores\";\r\n\r\nimport \"./SideBar.css\";\r\n\r\n\r\ninterface IProps {\r\n\r\n    score: number;\r\n    topScore: number;\r\n    hasWon: boolean;\r\n    hasLost: boolean;\r\n}\r\n\r\nexport function SideBar(props: IProps): JSX.Element {\r\n\r\n    return (\r\n\r\n        <div id=\"sidebar\">\r\n            <span id=\"clickyTitleText\">Clicky Game</span>\r\n            <hr />\r\n            <Scores\r\n                score={props.score}\r\n                topScore={props.topScore}\r\n                hasWon={props.hasWon}\r\n                hasLost={props.hasLost}\r\n            />\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nimport \"./Tile.css\";\r\n\r\ninterface IProps {\r\n\r\n    id: number;\r\n    alt: string;\r\n    src: string;\r\n    clickTile(id: number): void;\r\n}\r\n\r\nexport function Tile(props: IProps): JSX.Element {\r\n\r\n    return (\r\n\r\n        <div className=\"tile\">\r\n            <img\r\n                src={props.src}\r\n                alt={props.alt}\r\n                onClick={(): void => props.clickTile(props.id)}\r\n                draggable={false}\r\n            />\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nimport \"./TilesWrapper.css\";\r\n\r\ninterface IProps {\r\n\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport function TilesWrapper(props: IProps): JSX.Element {\r\n\r\n    return (\r\n\r\n        <div id=\"tilesWrapper\">{props.children}</div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nimport \"./Wrapper.css\";\r\n\r\ninterface IProps {\r\n\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport function Wrapper(props: IProps): JSX.Element {\r\n\r\n    return (\r\n\r\n        <div id=\"screenWrapper\">{props.children}</div>\r\n    );\r\n}","import { ITile } from \"./ITile\";\r\n\r\nexport const tiles: ITile[] = [\r\n    {\r\n        id: 1,\r\n        alt: \"Anthony Davis\",\r\n        src: \"/img/davis.jpg\"\r\n    },\r\n    {\r\n        id: 2,\r\n        alt: \"Stephen Curry\",\r\n        src: \"/img/curry.jpg\"\r\n    },\r\n    {\r\n        id: 3,\r\n        alt: \"Giannis Antetokounmpo\",\r\n        src: \"/img/giannis.jpg\"\r\n    },\r\n    {\r\n        id: 4,\r\n        alt: \"James Harden\",\r\n        src: \"/img/harden.jpg\"\r\n    },\r\n    {\r\n        id: 5,\r\n        alt: \"Kawhi Leonard\",\r\n        src: \"/img/kawhi.jpg\"\r\n    },\r\n    {\r\n        id: 6,\r\n        alt: \"Kevin Durant\",\r\n        src: \"/img/kd.jpg\"\r\n    },\r\n    {\r\n        id: 7,\r\n        alt: \"Kobe Bryant\",\r\n        src: \"/img/kobe.jpg\"\r\n    },\r\n    {\r\n        id: 8,\r\n        alt: \"Lebron James\",\r\n        src: \"/img/lebron.jpg\"\r\n    },\r\n    {\r\n        id: 9,\r\n        alt: \"Paul George\",\r\n        src: \"/img/pg.jpg\"\r\n    },\r\n    {\r\n        id: 10,\r\n        alt: \"Russel Westbrook\",\r\n        src: \"/img/westbrook.jpg\"\r\n    },\r\n    {\r\n        id: 11,\r\n        alt: \"Michael Jordan\",\r\n        src: \"/img/jordan.jpg\"\r\n    },\r\n    {\r\n        id: 12,\r\n        alt: \"Magic Johnson\",\r\n        src: \"/img/magic.jpg\"\r\n    }\r\n];","import React from \"react\";\r\n\r\nimport { SideBar } from \"./components/SideBar/SideBar\";\r\nimport { Tile } from \"./components/Tile/Tile\";\r\nimport { TilesWrapper } from \"./components/TilesWrapper/TilesWrapper\";\r\nimport { Wrapper } from \"./components/Wrapper/Wrapper\";\r\nimport { ITile } from \"./data/ITile\";\r\nimport { tiles } from \"./data/tiles\";\r\n\r\ninterface IState {\r\n\r\n    score: number;\r\n    topScore: number;\r\n    tiles: ITile[];\r\n    clicked: number[];\r\n    hasWon: boolean;\r\n    hasLost: boolean;\r\n}\r\n\r\nexport class App extends React.Component {\r\n\r\n    public readonly state: IState = {\r\n\r\n        score: 0,\r\n        topScore: 0,\r\n        tiles: this.shuffleTiles(tiles),\r\n        clicked: [],\r\n        hasWon: false,\r\n        hasLost: false\r\n    };\r\n\r\n    public readonly clickTile = (id: number): void => {\r\n\r\n        if (this.state.hasWon) {\r\n\r\n            const newState: IState = {\r\n\r\n                score: 0,\r\n                topScore: this.state.topScore,\r\n                tiles,\r\n                clicked: [],\r\n                hasWon: false,\r\n                hasLost: false\r\n            };\r\n\r\n            this.setState(newState);\r\n        }\r\n        else {\r\n\r\n            if (!this.state.clicked.includes(id)) {\r\n\r\n                let topScore: number = this.state.topScore;\r\n    \r\n                if (this.state.score === topScore) {\r\n    \r\n                    topScore++;\r\n                }\r\n    \r\n                this.state.clicked.push(id);\r\n    \r\n                const newState: IState = {\r\n    \r\n                    score: this.state.score + 1,\r\n                    topScore,\r\n                    tiles: this.shuffleTiles(tiles),\r\n                    clicked: this.state.clicked,\r\n                    hasWon: this.state.clicked.length === tiles.length,\r\n                    hasLost: false\r\n                };\r\n    \r\n                this.setState(newState);\r\n            }\r\n            else {\r\n    \r\n                const newState: IState = {\r\n    \r\n                    score: 0,\r\n                    topScore: this.state.topScore,\r\n                    tiles: this.shuffleTiles(tiles),\r\n                    clicked: [],\r\n                    hasWon: false,\r\n                    hasLost: true\r\n                };\r\n    \r\n                this.setState(newState);\r\n            }\r\n        }\r\n    }\r\n\r\n    public readonly render = (): JSX.Element => {\r\n\r\n        return (\r\n            <Wrapper>\r\n                <SideBar\r\n                    score={this.state.score}\r\n                    topScore={this.state.topScore}\r\n                    hasWon={this.state.hasWon}\r\n                    hasLost={this.state.hasLost}\r\n                />\r\n                <TilesWrapper>\r\n                    {this.state.tiles.map((tile: ITile) => (\r\n                        <Tile\r\n                            id={tile.id}\r\n                            src={tile.src}\r\n                            alt={tile.alt}\r\n                            clickTile={this.clickTile}\r\n                            key={tile.id}\r\n                        />\r\n                    ))}\r\n                </TilesWrapper>\r\n            </Wrapper>\r\n        );\r\n    }\r\n\r\n    private shuffleTiles(tilesArray: ITile[]): ITile[] {\r\n\r\n        for (let i: number = tilesArray.length - 1; i > 0; i--) {\r\n\r\n            const j: number = Math.floor(Math.random() * (i + 1));\r\n\r\n            [tilesArray[i], tilesArray[j]] = [tilesArray[j], tilesArray[i]];\r\n        }\r\n\r\n        return tilesArray;\r\n    }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}